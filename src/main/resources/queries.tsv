Person data irregularities	N1. Names with numbers	SELECT * FROM Persons WHERE name REGEXP '[0-9]'
Person data irregularities	N2. Lowercase first names	SELECT * FROM Persons WHERE BINARY name REGEXP '^[a-z]'
Person data irregularities	N3. Lowercase last names (without local name)	SELECT * FROM Persons WHERE BINARY MID(REVERSE(name), LOCATE(' ', REVERSE(name))-1,1) <> UPPER(MID(REVERSE(name), LOCATE(' ', REVERSE(name))-1,1))
Person data irregularities	N4. Lowercase last names (with local name)	SELECT * FROM Persons WHERE name LIKE '%(%' and BINARY MID(REVERSE(LEFT(name, LOCATE('(',name)-2)), LOCATE(' ', REVERSE(LEFT(name, LOCATE('(',name)-2)))-1,1) <> UPPER(MID(REVERSE(LEFT(name, LOCATE('(',name)-2)), LOCATE(' ', REVERSE(LEFT(name, LOCATE('(',name)-2)))-1,1))
Person data irregularities	N5. Bad local names (roman characters in brackets)	SELECT * FROM Persons WHERE BINARY name REGEXP '[(].*[A-Za-z]+'
Person data irregularities	N6. Missing one bracket for local names	SELECT * FROM Persons WHERE (name LIKE '%(%' OR name LIKE '%)') AND name NOT LIKE '%(%)%'
Person data irregularities	N7. Trailing spaces in names or local names	SELECT * FROM Persons WHERE name LIKE ' %' OR name LIKE '% ' OR name LIKE '%( %' OR name LIKE '% )'
Person data irregularities	N8. Cyrillic/Greek alphabet used instead of Latin	SELECT * FROM Persons WHERE name REGEXP '[А-ЯІΑ-Ω].*[(]' OR (name REGEXP '[А-ЯІΑ-Ω]' AND name NOT REGEXP '[(]')
Person data irregularities	G1. Person rows with empty string gender	SELECT * FROM Persons WHERE gender=''
Person data irregularities	C1. Invalid countryIds	SELECT p.id, subId, p.name, countryId FROM Persons AS p LEFT JOIN Countries AS c ON p.countryId = c.id WHERE c.id is NULL
Person data irregularities	D1. Bogus DOBs (DOBs with year outside of reasonable range):	SELECT * FROM Persons WHERE year>0 AND (year < 1920 OR year >= 2017)
Person data irregularities	D2. Missing DOCs at scale (competitions after 2018 with at least 3 missing DOBs)	SELECT competitionId, count(distinct personId) as missingDOBs FROM Results INNER JOIN Persons ON Results.personId=Persons.id WHERE Persons.year=0 AND RIGHT(competitionId,4) > 2018 GROUP BY competitionId HAVING missingDOBs >= 3 ORDER BY missingDOBs DESC
