[
  {
    "category": "Person data irregularities",
    "topic": "N1. Names with numbers",
    "query": "SELECT * FROM Persons WHERE name REGEXP '[0-9]'"
  },
  {
    "category": "Person data irregularities",
    "topic": "N2. Lowercase first names",
    "query": "SELECT * FROM Persons WHERE BINARY name REGEXP '^[a-z]'"
  },
  {
    "category": "Person data irregularities",
    "topic": "N3. Lowercase last names (without local name)",
    "query": "SELECT * FROM Persons WHERE BINARY MID(REVERSE(name), LOCATE(' ', REVERSE(name))-1,1) <> UPPER(MID(REVERSE(name), LOCATE(' ', REVERSE(name))-1,1))"
  },
  {
    "category": "Person data irregularities",
    "topic": "N4. Lowercase last names (with local name)",
    "query": "SELECT * FROM Persons WHERE name LIKE '%(%' and BINARY MID(REVERSE(LEFT(name, LOCATE('(',name)-2)), LOCATE(' ', REVERSE(LEFT(name, LOCATE('(',name)-2)))-1,1) <> UPPER(MID(REVERSE(LEFT(name, LOCATE('(',name)-2)), LOCATE(' ', REVERSE(LEFT(name, LOCATE('(',name)-2)))-1,1))"
  },
  {
    "category": "Person data irregularities",
    "topic": "N5. Bad local names (roman characters in brackets)",
    "query": "SELECT * FROM Persons WHERE BINARY name REGEXP '[(].*[A-Za-z]+'"
  },
  {
    "category": "Person data irregularities",
    "topic": "N6. Missing one bracket for local names",
    "query": "SELECT * FROM Persons WHERE (name LIKE '%(%' OR name LIKE '%)') AND name NOT LIKE '%(%)%'"
  },
  {
    "category": "Person data irregularities",
    "topic": "N7. Trailing spaces in names or local names",
    "query": "SELECT * FROM Persons WHERE name LIKE ' %' OR name LIKE '% ' OR name LIKE '%( %' OR name LIKE '% )'"
  },
  {
    "category": "Person data irregularities",
    "topic": "N8. Cyrillic/Greek alphabet used instead of Latin",
    "query": "SELECT * FROM Persons WHERE name REGEXP '[\u0410-\u042f\u0406\u0391-\u03a9].*[(]' OR (name REGEXP '[\u0410-\u042f\u0406\u0391-\u03a9]' AND name NOT REGEXP '[(]')"
  },
  {
    "category": "Person data irregularities",
    "topic": "G1. Person rows with empty string gender",
    "query": "SELECT * FROM Persons WHERE gender=''"
  },
  {
    "category": "Person data irregularities",
    "topic": "C1. Invalid countryIds",
    "query": "SELECT p.id, subId, p.name, countryId FROM Persons AS p\nLEFT JOIN Countries AS c ON p.countryId = c.id\nWHERE c.id is NULL"
  },
  {
    "category": "Person data irregularities",
    "topic": "D1. Bogus DOBs (DOBs with year outside of reasonable range)",
    "query": "SELECT * FROM Persons WHERE year > 0 AND (year < 1920 OR year >= YEAR(CURRENT_DATE()) - 3)"
  },
  {
    "category": "Person data irregularities",
    "topic": "D2. Missing DOCs at scale (competitions after 2018 with at least 3 missing DOBs)",
    "query": "SELECT competitionId, count(distinct personId) as missingDOBs\nFROM Results INNER JOIN Persons ON Results.personId=Persons.id\nWHERE Persons.year=0 AND RIGHT(competitionId,4) > 2018\nGROUP BY competitionId HAVING missingDOBs >= 3 ORDER BY missingDOBs DESC"
  },

  {
    "category": "1. Results with empty first solve",
    "topic": "SELECT * FROM Results WHERE value1=0",
    "query": ""
  },
  {
    "category": "Irregular results",
    "topic": "2. Wrong number of results (for non-combined rounds)",
    "query": "SELECT * FROM Results as r INNER JOIN Formats as f ON r.formatId = f.id \nWHERE r.roundTypeId not in ('c', 'd', 'e', 'g', 'h')\nAND f.expected_solve_count <> IF(value1<>0,1,0) + IF(value2<>0,1,0) + IF(value3<>0,1,0) + IF(value4<>0,1,0) + IF(value5<>0,1,0)"
  },
  {
    "category": "Irregular results",
    "topic": "3. Rounds with more than two (rounds with cutoff) / one (rounds without cutoff) different numbers of results (competitions with year >= 2013)",
    "query": "SELECT competitionId, eventId, roundTypeId, COUNT(solves) as num_results\nFROM (SELECT DISTINCT competitionId, eventId, roundTypeId, IF(value1<>0,1,0) \n + IF(value2<>0,1,0) + IF(value3<>0,1,0) + IF(value4<>0,1,0) + IF(value5<>0,1,0) as solves\nFROM Results WHERE RIGHT(competitionId, 4) >= 2013) re\nGROUP BY competitionId, eventId, roundTypeId \nHAVING IF(roundTypeId in ('c', 'd', 'e', 'g', 'h'), num_results > 2, num_results > 1)\nORDER BY competitionId"
  },
  {
    "category": "Irregular results",
    "topic": "4. Badly applied cutoffs: Now handled in category \"\"Consistency of Results, rounds & CE\"\"",
    "query": ""
  },
  {
    "category": "Irregular results",
    "topic": "5. Only DNS or zero results",
    "query": "SELECT * FROM Results WHERE ABS(1+value1)=1 AND ABS(1+value2)=1 AND ABS(1+value3)=1 AND ABS(1+value4)=1 AND ABS(1+value5)=1"
  },
  {
    "category": "Irregular results",
    "topic": "6. Non-zero average for rows with <= 2 attempt",
    "query": "SELECT * FROM Results WHERE average <> 0 AND IF(value1<>0,1,0) + IF(value2<>0,1,0) + IF(value3<>0,1,0) + IF(value4<>0,1,0) + IF(value5<>0,1,0) <= 2"
  },
  {
    "category": "Duplicate results",
    "topic": "1. Rows with at least two identical >0 results at one competition (ignoring 333fm, 333mbo):",
    "query": "SELECT value1, value2, value3, value4, value5, GROUP_CONCAT(distinct eventId) as events, GROUP_CONCAT(distinct personId) as people, GROUP_CONCAT(distinct competitionId), count(*) as amount FROM Results\nWHERE IF(value1>0,1,0) + IF(value2>0,1,0) + IF(value3>0,1,0) + IF(value4>0,1,0) + IF(value5>0,1,0) > 1 AND eventId not in ('333mbo', '333fm')\nGROUP BY value1, value2, value3, value4, value5 HAVING amount > 1 AND count(distinct competitionId) = 1 ORDER BY amount DESC"
  }
]
